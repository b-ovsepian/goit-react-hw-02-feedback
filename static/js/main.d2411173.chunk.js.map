{"version":3,"sources":["Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Statistics/Statistics.js","Components/Notification/Notification.js","App.js","index.js"],"names":["Button","styled","button","Feedback","options","onLeaveFeedback","map","item","name","onClick","H2","h2","Section","title","children","defaultProps","P","p","Statistics","good","neutral","bad","total","positivePercentage","isNaN","toFixed","Notification","message","App","state","addFeedback","event","a","setState","prevState","target","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ovBAIA,IAAMA,EAASC,IAAOC,OAAV,KA6BGC,EARE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC3B,OAAOD,EAAQE,KAAI,SAACC,GAAD,OACjB,cAACP,EAAD,CAAmBQ,KAAMD,EAAME,QAASJ,EAAxC,SACGE,GADUA,O,iHCvBjB,IAAMG,EAAKT,IAAOU,GAAV,KAKFC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,cAACJ,EAAD,UAAKG,IACJC,MAKQF,I,mJAOfA,EAAQG,aAAe,CACrBF,MAAO,kBCtBT,IAAMG,EAAIf,IAAOgB,EAAV,KAuBQC,EAfI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,eAACP,EAAD,oBAAUG,KACV,eAACH,EAAD,uBAAaI,KACb,eAACJ,EAAD,mBAASK,KACT,eAACL,EAAD,qBAAWM,KACX,eAACN,EAAD,gCAEGQ,MAAMD,GAAsB,EAAIA,EAAmBE,QAAQ,GAF9D,WCZSC,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCmDEC,E,4MAhDbC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPS,Y,uCAAc,WAAOC,GAAP,SAAAC,EAAA,sEACN,EAAKC,UAAS,SAACC,GACnB,OAAO,eAAGH,EAAMI,OAAO3B,KAAO0B,EAAUH,EAAMI,OAAO3B,MAAQ,MAFnD,2C,wDAKd4B,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAKC,GAC5C,OAAQD,EAAOC,IACd,I,EAELC,gCAAkC,WAChC,IAAMpB,EAAQ,EAAKc,qBACnB,OAAQ,EAAKP,MAAMV,KAAOG,EAAS,K,uDAInC,OACE,gCACE,cAAC,EAAD,CAAST,MAAO,wBAAhB,SACE,cAAC,EAAD,CACET,QAASiC,OAAOM,KAAKC,KAAKf,OAC1BxB,gBAAiBuC,KAAKd,gBAG1B,cAAC,EAAD,CAASjB,MAAO,aAAhB,SACG+B,KAAKR,qBAAuB,EAC3B,cAAC,EAAD,CACEjB,KAAMyB,KAAKf,MAAMV,KACjBC,QAASwB,KAAKf,MAAMT,QACpBC,IAAKuB,KAAKf,MAAMR,IAChBC,MAAOsB,KAAKR,qBACZb,mBAAoBqB,KAAKF,oCAG3B,cAAC,EAAD,CAAcf,QAAQ,+B,GAzChBkB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d2411173.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Button = styled.button`\n  background-color: black;\n  color: white;\n\n  font-size: 1em;\n  font-weight: 600;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border-radius: 3px;\n  text-transform: capitalize;\n\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: white;\n    color: black;\n  }\n`;\n\nconst Feedback = ({ options, onLeaveFeedback }) => {\n  return options.map((item) => (\n    <Button key={item} name={item} onClick={onLeaveFeedback}>\n      {item}\n    </Button>\n  ));\n};\n\nexport default Feedback;\n\nFeedback.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  addFeedback: PropTypes.func,\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst H2 = styled.h2`\n  margin-top: 0;\n  margin-bottom: 15px;\n`;\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <H2>{title}</H2>\n      {children}\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nSection.defaultProps = {\n  title: \"Title template\",\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst P = styled.p`\n  margin-top: 0;\n\n  &::not(::last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <P>Good: {good}</P>\n      <P>Neutral: {neutral}</P>\n      <P>Bad: {bad}</P>\n      <P>Total: {total}</P>\n      <P>\n        Positive feedback:\n        {isNaN(positivePercentage) ? 0 : positivePercentage.toFixed(2)}%\n      </P>\n    </>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React, { Component } from \"react\";\nimport Feedback from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./Components/Section/Section\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport Notification from \"./Components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = async (event) => {\n    await this.setState((prevState) => {\n      return { [event.target.name]: prevState[event.target.name] + 1 };\n    });\n  };\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => {\n      return (acc += value);\n    }, 0);\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return (this.state.good / total) * 100;\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title={\"Please leave feedback\"}>\n          <Feedback\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title={\"Statistics\"}>\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}